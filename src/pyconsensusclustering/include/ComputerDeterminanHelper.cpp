#include "ComputerDeterminanHelper.h"

void det3x3_helper(const double in1[10], const double in2[10], const double in3
                   [10], double M_sub[84])
{
  double t4;
  double t8;
  double t11;
  double t14;
  double t19;
  double t24;
  double t27;
  double t31;
  double t36;
  double t40;
  double t43;
  double t46;
  double t49;
  double t54;
  double t59;
  double t62;
  double t67;
  double t74;
  double t79;
  double t84;
  double t89;
  double t92;
  double t96;
  double t101;
  double t105;
  double t110;
  double t115;
  double t119;
  double t122;
  double t125;
  double t128;

  /*     This function was generated by the Symbolic Math Toolbox version 6.0. */
  /*     28-Nov-2014 00:23:11 */
  t4 = in1[0] * in2[1] + in1[1] * in2[0];
  t8 = (in1[1] * in2[1] + in1[0] * in2[4]) + in1[4] * in2[0];
  t11 = in1[1] * in2[4] + in1[4] * in2[1];
  t14 = in1[0] * in2[2] + in1[2] * in2[0];
  t19 = ((in1[1] * in2[2] + in1[2] * in2[1]) + in1[0] * in2[5]) + in1[5] * in2[0];
  t24 = ((in1[1] * in2[5] + in1[2] * in2[4]) + in1[4] * in2[2]) + in1[5] * in2[1];
  t27 = in1[4] * in2[5] + in1[5] * in2[4];
  t31 = (in1[2] * in2[2] + in1[0] * in2[7]) + in1[7] * in2[0];
  t36 = ((in1[2] * in2[5] + in1[5] * in2[2]) + in1[1] * in2[7]) + in1[7] * in2[1];
  t40 = (in1[5] * in2[5] + in1[4] * in2[7]) + in1[7] * in2[4];
  t43 = in1[2] * in2[7] + in1[7] * in2[2];
  t46 = in1[5] * in2[7] + in1[7] * in2[5];
  t49 = in1[0] * in2[3] + in1[3] * in2[0];
  t54 = ((in1[1] * in2[3] + in1[3] * in2[1]) + in1[0] * in2[6]) + in1[6] * in2[0];
  t59 = ((in1[1] * in2[6] + in1[3] * in2[4]) + in1[4] * in2[3]) + in1[6] * in2[1];
  t62 = in1[4] * in2[6] + in1[6] * in2[4];
  t67 = ((in1[2] * in2[3] + in1[3] * in2[2]) + in1[0] * in2[8]) + in1[8] * in2[0];
  t74 = ((((in1[2] * in2[6] + in1[3] * in2[5]) + in1[5] * in2[3]) + in1[6] *
          in2[2]) + in1[1] * in2[8]) + in1[8] * in2[1];
  t79 = ((in1[5] * in2[6] + in1[6] * in2[5]) + in1[4] * in2[8]) + in1[8] * in2[4];
  t84 = ((in1[2] * in2[8] + in1[3] * in2[7]) + in1[7] * in2[3]) + in1[8] * in2[2];
  t89 = ((in1[5] * in2[8] + in1[6] * in2[7]) + in1[7] * in2[6]) + in1[8] * in2[5];
  t92 = in1[7] * in2[8] + in1[8] * in2[7];
  t96 = (in1[3] * in2[3] + in1[0] * in2[9]) + in1[9] * in2[0];
  t101 = ((in1[3] * in2[6] + in1[6] * in2[3]) + in1[1] * in2[9]) + in1[9] * in2
    [1];
  t105 = (in1[6] * in2[6] + in1[4] * in2[9]) + in1[9] * in2[4];
  t110 = ((in1[2] * in2[9] + in1[3] * in2[8]) + in1[8] * in2[3]) + in1[9] * in2
    [2];
  t115 = ((in1[5] * in2[9] + in1[6] * in2[8]) + in1[8] * in2[6]) + in1[9] * in2
    [5];
  t119 = (in1[7] * in2[9] + in1[8] * in2[8]) + in1[9] * in2[7];
  t122 = in1[3] * in2[9] + in1[9] * in2[3];
  t125 = in1[6] * in2[9] + in1[9] * in2[6];
  t128 = in1[8] * in2[9] + in1[9] * in2[8];
  M_sub[0] = in1[0] * in2[0] * in3[0];
  M_sub[1] = in3[0] * t4 + in1[0] * in2[0] * in3[1];
  M_sub[2] = (in3[1] * t4 + in3[0] * t8) + in1[0] * in2[0] * in3[4];
  M_sub[3] = (in3[4] * t4 + in3[1] * t8) + in3[0] * t11;
  M_sub[4] = (in3[1] * t11 + in3[4] * t8) + in1[4] * in2[4] * in3[0];
  M_sub[5] = in3[4] * t11 + in1[4] * in2[4] * in3[1];
  M_sub[6] = in1[4] * in2[4] * in3[4];
  M_sub[7] = in3[0] * t14 + in1[0] * in2[0] * in3[2];
  M_sub[8] = ((in3[2] * t4 + in3[1] * t14) + in3[0] * t19) + in1[0] * in2[0] *
    in3[5];
  M_sub[9] = (((in3[5] * t4 + in3[2] * t8) + in3[4] * t14) + in3[1] * t19) +
    in3[0] * t24;
  M_sub[10] = (((in3[2] * t11 + in3[5] * t8) + in3[4] * t19) + in3[1] * t24) +
    in3[0] * t27;
  M_sub[11] = ((in3[5] * t11 + in3[1] * t27) + in3[4] * t24) + in1[4] * in2[4] *
    in3[2];
  M_sub[12] = in3[4] * t27 + in1[4] * in2[4] * in3[5];
  M_sub[13] = (in3[2] * t14 + in3[0] * t31) + in1[0] * in2[0] * in3[7];
  M_sub[14] = (((in3[7] * t4 + in3[5] * t14) + in3[2] * t19) + in3[1] * t31) +
    in3[0] * t36;
  M_sub[15] = ((((in3[7] * t8 + in3[5] * t19) + in3[2] * t24) + in3[4] * t31) +
               in3[1] * t36) + in3[0] * t40;
  M_sub[16] = (((in3[7] * t11 + in3[2] * t27) + in3[5] * t24) + in3[4] * t36) +
    in3[1] * t40;
  M_sub[17] = (in3[5] * t27 + in3[4] * t40) + in1[4] * in2[4] * in3[7];
  M_sub[18] = (in3[7] * t14 + in3[2] * t31) + in3[0] * t43;
  M_sub[19] = (((in3[7] * t19 + in3[5] * t31) + in3[2] * t36) + in3[1] * t43) +
    in3[0] * t46;
  M_sub[20] = (((in3[7] * t24 + in3[5] * t36) + in3[2] * t40) + in3[1] * t46) +
    in3[4] * t43;
  M_sub[21] = (in3[7] * t27 + in3[5] * t40) + in3[4] * t46;
  M_sub[22] = (in3[7] * t31 + in3[2] * t43) + in1[7] * in2[7] * in3[0];
  M_sub[23] = ((in3[7] * t36 + in3[2] * t46) + in3[5] * t43) + in1[7] * in2[7] *
    in3[1];
  M_sub[24] = (in3[7] * t40 + in3[5] * t46) + in1[7] * in2[7] * in3[4];
  M_sub[25] = in3[7] * t43 + in1[7] * in2[7] * in3[2];
  M_sub[26] = in3[7] * t46 + in1[7] * in2[7] * in3[5];
  M_sub[27] = in1[7] * in2[7] * in3[7];
  M_sub[28] = in3[0] * t49 + in1[0] * in2[0] * in3[3];
  M_sub[29] = ((in3[3] * t4 + in3[1] * t49) + in3[0] * t54) + in1[0] * in2[0] *
    in3[6];
  M_sub[30] = (((in3[6] * t4 + in3[3] * t8) + in3[4] * t49) + in3[1] * t54) +
    in3[0] * t59;
  M_sub[31] = (((in3[3] * t11 + in3[6] * t8) + in3[4] * t54) + in3[1] * t59) +
    in3[0] * t62;
  M_sub[32] = ((in3[6] * t11 + in3[1] * t62) + in3[4] * t59) + in1[4] * in2[4] *
    in3[3];
  M_sub[33] = in3[4] * t62 + in1[4] * in2[4] * in3[6];
  M_sub[34] = ((in3[3] * t14 + in3[2] * t49) + in3[0] * t67) + in1[0] * in2[0] *
    in3[8];
  M_sub[35] = (((((in3[8] * t4 + in3[6] * t14) + in3[3] * t19) + in3[5] * t49) +
                in3[2] * t54) + in3[1] * t67) + in3[0] * t74;
  M_sub[36] = ((((((in3[8] * t8 + in3[6] * t19) + in3[3] * t24) + in3[5] * t54)
                 + in3[2] * t59) + in3[4] * t67) + in3[1] * t74) + in3[0] * t79;
  M_sub[37] = (((((in3[8] * t11 + in3[3] * t27) + in3[6] * t24) + in3[2] * t62)
                + in3[5] * t59) + in3[4] * t74) + in3[1] * t79;
  M_sub[38] = ((in3[6] * t27 + in3[5] * t62) + in3[4] * t79) + in1[4] * in2[4] *
    in3[8];
  M_sub[39] = (((in3[8] * t14 + in3[3] * t31) + in3[7] * t49) + in3[2] * t67) +
    in3[0] * t84;
  M_sub[40] = ((((((in3[8] * t19 + in3[6] * t31) + in3[3] * t36) + in3[7] * t54)
                 + in3[5] * t67) + in3[2] * t74) + in3[1] * t84) + in3[0] * t89;
  M_sub[41] = ((((((in3[8] * t24 + in3[6] * t36) + in3[3] * t40) + in3[7] * t59)
                 + in3[5] * t74) + in3[2] * t79) + in3[4] * t84) + in3[1] * t89;
  M_sub[42] = (((in3[8] * t27 + in3[6] * t40) + in3[7] * t62) + in3[5] * t79) +
    in3[4] * t89;
  M_sub[43] = (((in3[8] * t31 + in3[3] * t43) + in3[7] * t67) + in3[2] * t84) +
    in3[0] * t92;
  M_sub[44] = (((((in3[8] * t36 + in3[3] * t46) + in3[6] * t43) + in3[7] * t74)
                + in3[5] * t84) + in3[2] * t89) + in3[1] * t92;
  M_sub[45] = (((in3[8] * t40 + in3[6] * t46) + in3[7] * t79) + in3[5] * t89) +
    in3[4] * t92;
  M_sub[46] = ((in3[8] * t43 + in3[7] * t84) + in3[2] * t92) + in1[7] * in2[7] *
    in3[3];
  M_sub[47] = ((in3[8] * t46 + in3[7] * t89) + in3[5] * t92) + in1[7] * in2[7] *
    in3[6];
  M_sub[48] = in3[7] * t92 + in1[7] * in2[7] * in3[8];
  M_sub[49] = (in3[3] * t49 + in3[0] * t96) + in1[0] * in2[0] * in3[9];
  M_sub[50] = (((in3[9] * t4 + in3[6] * t49) + in3[3] * t54) + in3[1] * t96) +
    in3[0] * t101;
  M_sub[51] = ((((in3[9] * t8 + in3[6] * t54) + in3[3] * t59) + in3[4] * t96) +
               in3[1] * t101) + in3[0] * t105;
  M_sub[52] = (((in3[9] * t11 + in3[3] * t62) + in3[6] * t59) + in3[4] * t101) +
    in3[1] * t105;
  M_sub[53] = (in3[6] * t62 + in3[4] * t105) + in1[4] * in2[4] * in3[9];
  M_sub[54] = (((in3[9] * t14 + in3[8] * t49) + in3[3] * t67) + in3[2] * t96) +
    in3[0] * t110;
  M_sub[55] = ((((((in3[9] * t19 + in3[8] * t54) + in3[6] * t67) + in3[3] * t74)
                 + in3[5] * t96) + in3[2] * t101) + in3[1] * t110) + in3[0] *
    t115;
  M_sub[56] = ((((((in3[9] * t24 + in3[8] * t59) + in3[6] * t74) + in3[3] * t79)
                 + in3[5] * t101) + in3[2] * t105) + in3[4] * t110) + in3[1] *
    t115;
  M_sub[57] = (((in3[9] * t27 + in3[8] * t62) + in3[6] * t79) + in3[5] * t105) +
    in3[4] * t115;
  M_sub[58] = ((((in3[9] * t31 + in3[8] * t67) + in3[3] * t84) + in3[7] * t96) +
               in3[2] * t110) + in3[0] * t119;
  M_sub[59] = ((((((in3[9] * t36 + in3[8] * t74) + in3[6] * t84) + in3[3] * t89)
                 + in3[7] * t101) + in3[5] * t110) + in3[2] * t115) + in3[1] *
    t119;
  M_sub[60] = ((((in3[9] * t40 + in3[8] * t79) + in3[6] * t89) + in3[7] * t105)
               + in3[5] * t115) + in3[4] * t119;
  M_sub[61] = (((in3[9] * t43 + in3[8] * t84) + in3[3] * t92) + in3[7] * t110) +
    in3[2] * t119;
  M_sub[62] = (((in3[9] * t46 + in3[8] * t89) + in3[6] * t92) + in3[7] * t115) +
    in3[5] * t119;
  M_sub[63] = (in3[8] * t92 + in3[7] * t119) + in1[7] * in2[7] * in3[9];
  M_sub[64] = (in3[9] * t49 + in3[3] * t96) + in3[0] * t122;
  M_sub[65] = (((in3[9] * t54 + in3[6] * t96) + in3[3] * t101) + in3[1] * t122)
    + in3[0] * t125;
  M_sub[66] = (((in3[9] * t59 + in3[6] * t101) + in3[3] * t105) + in3[1] * t125)
    + in3[4] * t122;
  M_sub[67] = (in3[9] * t62 + in3[6] * t105) + in3[4] * t125;
  M_sub[68] = (((in3[9] * t67 + in3[8] * t96) + in3[3] * t110) + in3[2] * t122)
    + in3[0] * t128;
  M_sub[69] = (((((in3[9] * t74 + in3[8] * t101) + in3[6] * t110) + in3[3] *
                 t115) + in3[2] * t125) + in3[5] * t122) + in3[1] * t128;
  M_sub[70] = (((in3[9] * t79 + in3[8] * t105) + in3[6] * t115) + in3[5] * t125)
    + in3[4] * t128;
  M_sub[71] = (((in3[9] * t84 + in3[8] * t110) + in3[3] * t119) + in3[7] * t122)
    + in3[2] * t128;
  M_sub[72] = (((in3[9] * t89 + in3[8] * t115) + in3[6] * t119) + in3[7] * t125)
    + in3[5] * t128;
  M_sub[73] = (in3[9] * t92 + in3[8] * t119) + in3[7] * t128;
  M_sub[74] = (in3[9] * t96 + in3[3] * t122) + in1[9] * in2[9] * in3[0];
  M_sub[75] = ((in3[9] * t101 + in3[3] * t125) + in3[6] * t122) + in1[9] * in2[9]
    * in3[1];
  M_sub[76] = (in3[9] * t105 + in3[6] * t125) + in1[9] * in2[9] * in3[4];
  M_sub[77] = ((in3[9] * t110 + in3[8] * t122) + in3[3] * t128) + in1[9] * in2[9]
    * in3[2];
  M_sub[78] = ((in3[9] * t115 + in3[8] * t125) + in3[6] * t128) + in1[9] * in2[9]
    * in3[5];
  M_sub[79] = (in3[9] * t119 + in3[8] * t128) + in1[9] * in2[9] * in3[7];
  M_sub[80] = in3[9] * t122 + in1[9] * in2[9] * in3[3];
  M_sub[81] = in3[9] * t125 + in1[9] * in2[9] * in3[6];
  M_sub[82] = in3[9] * t128 + in1[9] * in2[9] * in3[8];
  M_sub[83] = in1[9] * in2[9] * in3[9];
}

void Generate_F3x3_matrix(const double in1[12], const double in2[6], double
  out1[10], double out2[10], double out3[10])
{
  double t2;
  double t3;
  double t4;
  double t5;
  double t6;
  double t7;
  double t9;
  double t10;
  double t11;
  double t12;
  double t13;
  double t14;
  double t15;
  double t16;
  double t18;
  double t19;
  double t21;
  double t22;
  double t54;
  double t57;
  double t58;
  double t60;
  double t62;
  double t64;
  double t86;
  double t87;
  double t88;

  /*     This function was generated by the Symbolic Math Toolbox version 6.0. */
  /*     28-Nov-2014 00:22:59 */
  t2 = in1[6] * in2[0] * 2.0;
  t3 = in1[7] * in2[2];
  t4 = in1[6] * in2[2];
  t5 = in1[8] * in2[0];
  t6 = in1[6] * in2[1];
  t7 = in1[7] * in2[0];
  t9 = in1[2] * (t6 + t7);
  t10 = in1[6] * in1[1] * in2[1] * 2.0;
  t11 = in1[7] * in2[1] * 2.0;
  t12 = in1[8] * in2[2] * 2.0;
  t13 = in1[6] * in1[2] * in2[2] * 2.0;
  t14 = in1[7] * in1[2] * in2[2] * 2.0;
  t15 = t4 + t5;
  t16 = in1[8] * in2[1];
  t18 = in1[0] * (t3 + t16);
  t19 = in1[0] * in1[8] * in2[0] * 2.0;
  t21 = in1[2] * (t6 - t7);
  t22 = t4 - t5;
  out1[0] = (t9 - in1[1] * t15) + in1[0] * (t3 - in1[8] * in2[1]);
  out1[1] = (t19 - in1[2] * (t2 - in1[7] * in2[1] * 2.0)) - in1[1] * in1[8] *
    in2[1] * 2.0;
  out1[2] = (t14 + in1[1] * (t2 - in1[8] * in2[2] * 2.0)) - in1[0] * in1[7] *
    in2[0] * 2.0;
  out1[3] = (t10 + t13) - in1[0] * (t11 + t12);
  out1[4] = (-t9 + t18) - in1[1] * t22;
  out1[5] = (t10 - t13) - in1[0] * (t11 - t12);
  out1[6] = (t14 - in1[1] * (t2 + t12)) + in1[0] * in1[7] * in2[0] * 2.0;
  out1[7] = (-t18 + t21) + in1[1] * t15;
  out1[8] = (t19 - in1[2] * (t2 + t11)) + in1[1] * in1[8] * in2[1] * 2.0;
  out1[9] = (-t21 + in1[1] * t22) - in1[0] * (t3 - t16);
  t6 = in2[1] * in2[5] * 2.0 - in2[4] * in2[2] * 2.0;
  t7 = in2[0] * in2[4] * 2.0 - in2[3] * in2[1] * 2.0;
  t22 = in2[0] * in2[5] * 2.0 - in2[3] * in2[2] * 2.0;
  t21 = in1[2] * (in2[0] * in2[4] - in2[3] * in2[1]);
  t4 = in2[0] * in2[5] - in2[3] * in2[2];
  t5 = in2[1] * in2[5] - in2[4] * in2[2];
  t2 = in1[2] * t22;
  t3 = in1[1] * t7;
  t9 = in1[0] * t5;
  t10 = in1[1] * t4;
  t22 *= in1[0];
  out2[0] = (t21 - in1[0] * t5) - in1[1] * t4;
  out2[1] = t22 - in1[1] * t6;
  out2[2] = -in1[0] * t7 - in1[2] * t6;
  out2[3] = t2 + t3;
  out2[4] = (t21 + t9) + t10;
  out2[5] = t2 - t3;
  out2[6] = -in1[0] * t7 + in1[2] * t6;
  out2[7] = (-t21 + t9) - t10;
  out2[8] = -t22 - in1[1] * t6;
  out2[9] = (-t21 - t9) + t10;
  t22 = in1[6] * in1[10] - in1[7] * in1[9];
  t6 = in1[6] * in1[11] - in1[8] * in1[9];
  t7 = in1[7] * in1[11] - in1[8] * in1[10];
  t54 = in1[6] * in1[10] * 2.0 - in1[7] * in1[9] * 2.0;
  t57 = in1[7] * in1[11] * 2.0 - in1[8] * in1[10] * 2.0;
  t58 = in2[0] * t57;
  t60 = in1[6] * in1[11] * 2.0 - in1[8] * in1[9] * 2.0;
  t62 = in2[1] * t60;
  t64 = in1[3] * in2[0];
  t21 = in2[1] * t22;
  t4 = in2[2] * t6;
  t5 = in2[0] * t22;
  t2 = in2[2] * t7;
  t3 = in2[0] * t6;
  t22 = in2[1] * t7;
  t9 = in1[2] * (t3 - t22);
  t10 = in1[5] * in2[1] * 2.0;
  t11 = in1[3] * in2[2] * 2.0;
  t12 = in1[5] * in2[0] * 2.0;
  t13 = in2[2] * t54;
  t14 = in1[2] * in2[2] * t60;
  t15 = in1[4] * in2[1];
  t16 = t21 - t4;
  t18 = in1[1] * (t5 + t2);
  t19 = in1[4] * in2[0] * 2.0;
  t86 = in1[3] * in2[1] * 2.0;
  t87 = in1[1] * in2[1] * t54;
  t88 = in1[5] * in2[2];
  t7 = in1[0] * (t21 + t4);
  t6 = t5 - t2;
  t22 += t3;
  out3[0] = ((((t64 + t9) + t18) + t7) - in1[4] * in2[1]) - in1[5] * in2[2];
  out3[1] = (((t19 + t86) + t87) + in1[2] * (t58 + t62)) - in1[0] * in2[0] * t54;
  out3[2] = (((t11 + t12) + t14) - in1[1] * (t58 - in2[2] * t54)) - in1[0] *
    in2[0] * t60;
  out3[3] = (((t10 - in1[4] * in2[2] * 2.0) - in1[0] * (t62 - in2[2] * t54)) -
             in1[1] * in2[1] * t57) - in1[2] * in2[2] * t57;
  out3[4] = ((((-t64 - t9) + t15) - in1[5] * in2[2]) - in1[0] * t16) - in1[1] *
    t6;
  out3[5] = (((t10 - in1[0] * (t62 + t13)) + in1[4] * in2[2] * 2.0) - in1[1] *
             in2[1] * t57) + in1[2] * in2[2] * t57;
  out3[6] = (((t11 - t12) + t14) + in1[1] * (t58 + t13)) + in1[0] * in2[0] * t60;
  out3[7] = ((((-t64 - t15) - t18) + t88) + in1[0] * t16) - in1[2] * t22;
  out3[8] = (((t19 - t86) - t87) + in1[2] * (t58 - t62)) - in1[0] * in2[0] * t54;
  out3[9] = ((((t64 + t15) + t88) - t7) + in1[1] * t6) + in1[2] * t22;
}

void det2x2_helper(const double in1[10], const double in2[10], double M_sub[35])
{
  /*     This function was generated by the Symbolic Math Toolbox version 6.0. */
  /*     08-Aug-2014 15:16:09 */
  M_sub[0] = in1[0] * in2[0];
  M_sub[1] = in1[0] * in2[1] + in1[1] * in2[0];
  M_sub[2] = (in1[1] * in2[1] + in1[0] * in2[4]) + in1[4] * in2[0];
  M_sub[3] = in1[1] * in2[4] + in1[4] * in2[1];
  M_sub[4] = in1[4] * in2[4];
  M_sub[5] = in1[0] * in2[2] + in1[2] * in2[0];
  M_sub[6] = ((in1[1] * in2[2] + in1[2] * in2[1]) + in1[0] * in2[5]) + in1[5] *
    in2[0];
  M_sub[7] = ((in1[1] * in2[5] + in1[2] * in2[4]) + in1[4] * in2[2]) + in1[5] *
    in2[1];
  M_sub[8] = in1[4] * in2[5] + in1[5] * in2[4];
  M_sub[9] = (in1[2] * in2[2] + in1[0] * in2[7]) + in1[7] * in2[0];
  M_sub[10] = ((in1[2] * in2[5] + in1[5] * in2[2]) + in1[1] * in2[7]) + in1[7] *
    in2[1];
  M_sub[11] = (in1[5] * in2[5] + in1[4] * in2[7]) + in1[7] * in2[4];
  M_sub[12] = in1[2] * in2[7] + in1[7] * in2[2];
  M_sub[13] = in1[5] * in2[7] + in1[7] * in2[5];
  M_sub[14] = in1[7] * in2[7];
  M_sub[15] = in1[0] * in2[3] + in1[3] * in2[0];
  M_sub[16] = ((in1[1] * in2[3] + in1[3] * in2[1]) + in1[0] * in2[6]) + in1[6] *
    in2[0];
  M_sub[17] = ((in1[1] * in2[6] + in1[3] * in2[4]) + in1[4] * in2[3]) + in1[6] *
    in2[1];
  M_sub[18] = in1[4] * in2[6] + in1[6] * in2[4];
  M_sub[19] = ((in1[2] * in2[3] + in1[3] * in2[2]) + in1[0] * in2[8]) + in1[8] *
    in2[0];
  M_sub[20] = ((((in1[2] * in2[6] + in1[3] * in2[5]) + in1[5] * in2[3]) + in1[6]
                * in2[2]) + in1[1] * in2[8]) + in1[8] * in2[1];
  M_sub[21] = ((in1[5] * in2[6] + in1[6] * in2[5]) + in1[4] * in2[8]) + in1[8] *
    in2[4];
  M_sub[22] = ((in1[2] * in2[8] + in1[3] * in2[7]) + in1[7] * in2[3]) + in1[8] *
    in2[2];
  M_sub[23] = ((in1[5] * in2[8] + in1[6] * in2[7]) + in1[7] * in2[6]) + in1[8] *
    in2[5];
  M_sub[24] = in1[7] * in2[8] + in1[8] * in2[7];
  M_sub[25] = (in1[3] * in2[3] + in1[0] * in2[9]) + in1[9] * in2[0];
  M_sub[26] = ((in1[3] * in2[6] + in1[6] * in2[3]) + in1[1] * in2[9]) + in1[9] *
    in2[1];
  M_sub[27] = (in1[6] * in2[6] + in1[4] * in2[9]) + in1[9] * in2[4];
  M_sub[28] = ((in1[2] * in2[9] + in1[3] * in2[8]) + in1[8] * in2[3]) + in1[9] *
    in2[2];
  M_sub[29] = ((in1[5] * in2[9] + in1[6] * in2[8]) + in1[8] * in2[6]) + in1[9] *
    in2[5];
  M_sub[30] = (in1[7] * in2[9] + in1[8] * in2[8]) + in1[9] * in2[7];
  M_sub[31] = in1[3] * in2[9] + in1[9] * in2[3];
  M_sub[32] = in1[6] * in2[9] + in1[9] * in2[6];
  M_sub[33] = in1[8] * in2[9] + in1[9] * in2[8];
  M_sub[34] = in1[9] * in2[9];
}

void Generate_F2x2_matrix(const double in1[12], const double in2[6], double
  out1[10], double out2[10])
{
 double t2;
  double t3;
  double t4;
  double t5;
  double t6;
  double t7;
  double t9;
  double t10;
  double t11;
  double t12;
  double t13;
  double t14;
  double t15;
  double t16;
  double t18;
  double t19;
  double t21;
  double t22;

  /*     This function was generated by the Symbolic Math Toolbox version 6.0. */
  /*     28-Nov-2014 00:23:20 */
  t2 = in1[6] * in2[0] * 2.0;
  t3 = in1[7] * in2[2];
  t4 = in1[6] * in2[2];
  t5 = in1[8] * in2[0];
  t6 = in1[6] * in2[1];
  t7 = in1[7] * in2[0];
  t9 = in1[2] * (t6 + t7);
  t10 = in1[6] * in1[1] * in2[1] * 2.0;
  t11 = in1[7] * in2[1] * 2.0;
  t12 = in1[8] * in2[2] * 2.0;
  t13 = in1[6] * in1[2] * in2[2] * 2.0;
  t14 = in1[7] * in1[2] * in2[2] * 2.0;
  t15 = t4 + t5;
  t16 = in1[8] * in2[1];
  t18 = in1[0] * (t3 + t16);
  t19 = in1[0] * in1[8] * in2[0] * 2.0;
  t21 = in1[2] * (t6 - t7);
  t22 = t4 - t5;
  out1[0] = (t9 - in1[1] * t15) + in1[0] * (t3 - in1[8] * in2[1]);
  out1[1] = (t19 - in1[2] * (t2 - in1[7] * in2[1] * 2.0)) - in1[1] * in1[8] *
    in2[1] * 2.0;
  out1[2] = (t14 + in1[1] * (t2 - in1[8] * in2[2] * 2.0)) - in1[0] * in1[7] *
    in2[0] * 2.0;
  out1[3] = (t10 + t13) - in1[0] * (t11 + t12);
  out1[4] = (-t9 + t18) - in1[1] * t22;
  out1[5] = (t10 - t13) - in1[0] * (t11 - t12);
  out1[6] = (t14 - in1[1] * (t2 + t12)) + in1[0] * in1[7] * in2[0] * 2.0;
  out1[7] = (-t18 + t21) + in1[1] * t15;
  out1[8] = (t19 - in1[2] * (t2 + t11)) + in1[1] * in1[8] * in2[1] * 2.0;
  out1[9] = (-t21 + in1[1] * t22) - in1[0] * (t3 - t16);
  t6 = in2[1] * in2[5] * 2.0 - in2[4] * in2[2] * 2.0;
  t7 = in2[0] * in2[4] * 2.0 - in2[3] * in2[1] * 2.0;
  t22 = in2[0] * in2[5] * 2.0 - in2[3] * in2[2] * 2.0;
  t21 = in1[2] * (in2[0] * in2[4] - in2[3] * in2[1]);
  t4 = in2[0] * in2[5] - in2[3] * in2[2];
  t5 = in2[1] * in2[5] - in2[4] * in2[2];
  t2 = in1[2] * t22;
  t3 = in1[1] * t7;
  t9 = in1[0] * t5;
  t10 = in1[1] * t4;
  t22 *= in1[0];
  out2[0] = (t21 - in1[0] * t5) - in1[1] * t4;
  out2[1] = t22 - in1[1] * t6;
  out2[2] = -in1[0] * t7 - in1[2] * t6;
  out2[3] = t2 + t3;
  out2[4] = (t21 + t9) + t10;
  out2[5] = t2 - t3;
  out2[6] = -in1[0] * t7 + in1[2] * t6;
  out2[7] = (-t21 + t9) - t10;
  out2[8] = -t22 - in1[1] * t6;
  out2[9] = (-t21 - t9) + t10;
}

